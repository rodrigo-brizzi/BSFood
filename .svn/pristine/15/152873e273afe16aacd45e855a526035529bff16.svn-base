using BSFood.Apoio;
using BSFood.BusinessLogic.Interfaces;
using BSFood.DataAccess;
using BSFood.DataTransfer;
using BSFood.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace BSFood.BusinessLogic
{
    public class Configuracao : IConfiguracao, IDisposable
    {
        private bool blnFecharCon;
        private EFContexto objCtx;
        private GerenciaTransacao objTransacao;


        public Configuracao()
            : base()
        {
            this.objCtx = new EFContexto();
            this.objTransacao = new GerenciaTransacao(ref this.objCtx);
            blnFecharCon = true;
        }

        public Configuracao(ref EFContexto _objCtx, ref GerenciaTransacao _objTransacao)
            : base()
        {
            this.objCtx = _objCtx;
            this.objTransacao = _objTransacao;
            blnFecharCon = false;
        }

        #region Parametrização

        public Retorno RetornaConfiguracao()
        {
            Retorno objRetorno = new Retorno();
            try
            {
                tbConfiguracao objConfiguracao = this.objCtx.tbConfiguracao.AsNoTracking().FirstOrDefault();
                if (objConfiguracao != null)
                {
                    objRetorno.intCodigoErro = 0;
                    objRetorno.objRetorno = objConfiguracao;
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = "Registro não encontrado";
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno SalvarConfiguracao(tbConfiguracao objConfiguracao)
        {
            Retorno objRetorno = new Retorno();
            string strValidacao = this.ValidaConfiguracao(objConfiguracao);
            try
            {
                if (strValidacao == string.Empty)
                {
                    tbConfiguracao objConfiguracaoContexto = this.objCtx.tbConfiguracao.FirstOrDefault();
                    this.objCtx.Entry(objConfiguracaoContexto).CurrentValues.SetValues(objConfiguracao);
                    this.objCtx.SaveChanges();
                    using (Auditoria objBLL = new Auditoria(ref this.objCtx, ref this.objTransacao))
                        objBLL.SalvarAuditoria(objConfiguracao.cfg_codigo, enOperacao.Alteracao, objConfiguracao);
                    objRetorno = RetornaConfiguracao();
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = strValidacao;
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        private string ValidaConfiguracao(tbConfiguracao objConfiguracao)
        {
            if (string.IsNullOrEmpty(objConfiguracao.cfg_cnpjSoftwareHouse) || string.IsNullOrWhiteSpace(objConfiguracao.cfg_cnpjSoftwareHouse))
                return "O Cnpj da SoftwareHouse deve ser informado.";
            if (string.IsNullOrEmpty(objConfiguracao.cfg_impressoraEntrega) || string.IsNullOrWhiteSpace(objConfiguracao.cfg_impressoraEntrega))
                return "A impressora de entrega deve ser informada.";
            if (string.IsNullOrEmpty(objConfiguracao.cfg_impressoraComanda) || string.IsNullOrWhiteSpace(objConfiguracao.cfg_impressoraComanda))
                return "A impressora de comanda deve ser informada.";
            if (string.IsNullOrEmpty(objConfiguracao.cfg_impressoraBebida) || string.IsNullOrWhiteSpace(objConfiguracao.cfg_impressoraBebida))
                return "A impressora das bebidas deve ser informada.";
            if (string.IsNullOrEmpty(objConfiguracao.cfg_impressoraBalcao) || string.IsNullOrWhiteSpace(objConfiguracao.cfg_impressoraBalcao))
                return "A impressora do balcão deve ser informada.";
            return string.Empty;
        }        

        #endregion Parametrização

        public void Dispose()
        {
            if (this.blnFecharCon)
            {
                this.objCtx.Dispose();
                this.objCtx = null;
            }
        }
    }
}
