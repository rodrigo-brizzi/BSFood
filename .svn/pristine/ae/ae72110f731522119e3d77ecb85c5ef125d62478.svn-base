using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Configuration;
using System.Configuration;
using BSFoodServer.BLL;
using System.Configuration;
using System.Windows.Media;
using BSFoodServer.Apoio;

//comando para instalar o serviço
//-------------------------------
//installUtil C:\Fontes\appLazaro\appLazaroHost\bin\Release\appLazaroHost.exe

//comando para desinstalar o serviço
//----------------------------------
//installUtil /U C:\Fontes\appLazaro\appLazaroHost\bin\Release\appLazaroHost.exe

//Recomendações
//-------------
//--Pare o serviço e feche a janela de serviços antes de instalar ou desinstalar um serviço;
//--Após qualquer alteração no serviço sempre instale/desinstale o serviço novamente;
//--Evite usar interface com o usuário nos serviços criados;
namespace BSFoodServer.SVC
{
    public class HostingManager
    {
        public static Dictionary<string, ServiceHostBase> Hosts { get; set; }

        static HostingManager()
        {
            Hosts = new Dictionary<string, ServiceHostBase>();
        }

        /// <summary>
        /// A helper dictionary with all the service implementation types. 
        /// </summary>
        static Dictionary<string, Type> ServiceTypeResolver = new Dictionary<string, Type>()
        {   
            {"BSFoodServer.BLL.Pessoas", typeof(Pessoas)},
            {"BSFoodServer.BLL.ClientAccessPolicy", typeof(ClientAccessPolicy)},
        };

        public static string[] ServicesTypes
        {
            get { return ServiceTypeResolver.Keys.ToArray(); }
        }

        /// <summary>
        /// Create the ServiceHost objects that will host the wcf services. 
        /// </summary>
        public static void CreateHosts()
        {
            Util.LogTela("Criando Serviços");

            var cfg = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None).GetSectionGroup("system.serviceModel");

            var servicesConfig = cfg.Sections["services"] as ServicesSection;
            if (servicesConfig == null)
                throw new HostingException("SevicesToHostNotFound");

            // read the service configuration and use it to create a service host
            foreach (ServiceElement item in servicesConfig.Services)
            {
                try
                {
                    Hosts[item.Name] = new ServiceHost(ServiceTypeResolver[item.Name]);
                    // Add IExtentsion<ServicaHostBase> extentions to each host.
                    //Hosts[item.Name].Extensions.Add(new ServerStateHostExtension()); // attach a memory state collection

                    Util.LogTela("Serviço Criado: " + item.Name);
                    Hosts[item.Name].Faulted += new EventHandler(HostingManager_Faulted);
                }
                catch (Exception ex)
                {
                    Util.LogTela("Erro ao criar o serviço: " + item.Name + " " + ex.ToString(), Colors.Red);
                }
            }
        }

        

        /// <summary>
        /// Start the service hosts and begin listening on the channels
        /// </summary>
        public static void CreateHost(string name)
        {
            if (!Hosts.ContainsKey(name))
                return;
            try
            {
                Hosts[name] = new ServiceHost(ServiceTypeResolver[name]);
                //Hosts[name].Extensions.Add(new ServerStateHostExtension());
                //Hosts[name].Extensions.Add(new CacheHostExtension());
                Util.LogTela("Serviço Criado: " + name);
                Hosts[name].Faulted += new EventHandler(HostingManager_Faulted);
            }
            catch (Exception ex)
            {
                Util.LogTela("Erro ao criar o serviço: " + name + " " + ex.ToString(), Colors.Red);
            }
        }


        public static void StartHosts()
        {
            ServiceHost err = null;
            Util.LogTela("Iniciando Serviços");
            foreach (ServiceHost host in Hosts.Values)
            {
                try
                {
                    err = host;
                    host.Open();

                    if (host.State == CommunicationState.Opened)
                    {
                        Util.LogTela("Serviço iniciado: " + host.Description.Name);

                        foreach (var dispatcher in host.ChannelDispatchers)
                        {
                            if ((dispatcher.Listener != null) && (dispatcher.Listener.Uri != null))
                                Util.LogTela("Canal aberto: " + dispatcher.Listener.Uri.AbsoluteUri);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Util.LogTela("Erro ao iniciar o serviço: " + err.Description.Name + " " + ex.ToString(), Colors.Red);
                }
            }
        }

        public static void StopHost(string name)
        {
            Util.LogTela("Parando Serviços", Colors.Red);
            if (name == null)
            {
                foreach (var host in Hosts.Values)
                {
                    if ((host != null) && (host.State == CommunicationState.Opened))
                    {
                        host.Close();
                        Util.LogTela("Serviço parado: " + host.Description.Name, Colors.Red);
                    }
                }
                Hosts.Clear();
            }
            else
            {
                if (Hosts.ContainsKey(name) && Hosts[name] != null && Hosts[name].State == CommunicationState.Opened)
                {
                    Hosts[name].Close();
                    Hosts.Remove(name);
                    Util.LogTela("Serviço parado: " + name, Colors.Red);
                }
            }
        }

        public static void StartHost(string name)
        {
            StringBuilder sb = new StringBuilder();
            try
            {
                if (Hosts.ContainsKey(name))
                {
                    CreateHost(name);
                    Hosts[name].Open();
                }

                if (Hosts[name].State == CommunicationState.Opened)
                {
                    Util.LogTela("Serviço iniciado: " + Hosts[name].Description.Name);

                    foreach (var dispatcher in Hosts[name].ChannelDispatchers)
                    {
                        if ((dispatcher.Listener != null) && (dispatcher.Listener.Uri != null))
                            sb.AppendLine(string.Format("Canal aberto: ", dispatcher.Listener.Uri.AbsoluteUri));
                    }
                    Util.LogTela(sb.ToString());
                    sb.Clear();
                }
            }
            catch (Exception ex)
            {
                Util.LogTela("Erro ao iniciar o serviço: " + name + " " + ex.ToString(), Colors.Red);
            }
        }

        public static bool IsAlive(string name)
        {
            if (!Hosts.ContainsKey(name))
                return false;

            return ((Hosts[name].State == CommunicationState.Opened));
        }

        private static void HostingManager_Faulted(object sender, EventArgs e)
        {
            Util.LogTela("Erro no serviço " + sender.ToString(), Colors.Red);
        }
    }
}
