using BSFood.View;
using BSFood.Apoio;
using BSFood.Models;
using BSFood.BusinessLogic;
using BSFood.DataTransfer;
using System;
using System.Collections.Generic;
using System.Net;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;

namespace BSFood.ViewModel
{
    public class FormaPagamentoViewModel : TelaViewModel
    {
        public ICommand AnteriorCommand { get; set; }
        public ICommand ProximoCommand { get; set; }
        public ICommand NovoCommand { get; set; }
        public ICommand EditarCommand { get; set; }
        public ICommand SalvarCommand { get; set; }
        public ICommand CancelarCommand { get; set; }
        public ICommand ExcluirCommand { get; set; }
        public ICommand PesquisarCommand { get; set; }
        public ICommand LogCommand { get; set; }
        public ICommand BuscarCommand { get; set; }

        private winPesquisa objTelaPesquisa;

        public FormaPagamentoViewModel()
        {
            AnteriorCommand = new DelegateCommand(Anterior, CanAnterior);
            ProximoCommand = new DelegateCommand(Proximo, CanProximo);
            NovoCommand = new DelegateCommand(Novo, CanNovo);
            EditarCommand = new DelegateCommand(Editar, CanEditar);
            SalvarCommand = new DelegateCommand(Salvar, CanSalvar);
            CancelarCommand = new DelegateCommand(Cancelar, CanCancelar);
            ExcluirCommand = new DelegateCommand(Excluir, CanExcluir);
            PesquisarCommand = new DelegateCommand(Pesquisar, CanPesquisar);
            LogCommand = new DelegateCommand(Log, CanLog);
            BuscarCommand = new DelegateCommand(Buscar, CanBuscar);
        }


        #region Propriedades

        public int? fpg_codigo
        {
            get
            {
                if (this.objFormaPagamento == null)
                    return null;
                else
                    return this.objFormaPagamento.fpg_codigo;
            }
            set
            {
                if (this.objFormaPagamento == null || this.objFormaPagamento.fpg_codigo != value)
                {
                    Retorno objRetorno;
                    using (var objBLL = new FormaPagamento())
                    {
                        objRetorno = objBLL.RetornaFormaPagamento(value == null ? 0 : (int)value, null);
                    }
                    if (objRetorno.intCodigoErro == 0)
                    {
                        this.objFormaPagamento = (tbFormaPagamento)objRetorno.objRetorno;
                        base.enStatusTelaAtual = enStatusTela.Navegacao;
                    }
                    else
                    {
                        MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
                        RaisePropertyChanged();
                    }
                }
            }
        }

        [Required(ErrorMessage = "Nome da FormaPagamento obrigatório")]
        [StringLength(100, ErrorMessage = "É permitido apenas 100 caracteres")]
        public string fpg_descricao
        {
            get { return this.objFormaPagamento == null ? string.Empty : this.objFormaPagamento.fpg_descricao; }
            set
            {
                if (this.objFormaPagamento.fpg_descricao != value)
                {
                    this.objFormaPagamento.fpg_descricao = value;
                    RaisePropertyChanged();
                }
            }
        }

        [StringLength(2, ErrorMessage = "É permitido apenas 2 caracteres")]
        public string fpg_codigoSat
        {
            get { return this.objFormaPagamento == null ? string.Empty : this.objFormaPagamento.fpg_codigoSat; }
            set
            {
                if (this.objFormaPagamento.fpg_codigoSat != value)
                {
                    this.objFormaPagamento.fpg_codigoSat = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Required(ErrorMessage = "Modalidade da cobrança obrigatória!")]
        public string fpg_cobranca
        {
            get { return this.objFormaPagamento == null ? string.Empty : this.objFormaPagamento.fpg_cobranca; }
            set
            {
                if (this.objFormaPagamento.fpg_cobranca != value)
                {
                    this.objFormaPagamento.fpg_cobranca = value;
                    RaisePropertyChanged();
                }
            }
        }

        private tbFormaPagamento _objFormaPagamento;
        public tbFormaPagamento objFormaPagamento
        {
            get { return this._objFormaPagamento; }
            set
            {
                this._objFormaPagamento = value;
                RaisePropertyChanged(null);
            }
        }

        private List<tbFormaPagamento> _arrFormaPagamentoPesquisa;
        public List<tbFormaPagamento> arrFormaPagamentoPesquisa
        {
            get { return this._arrFormaPagamentoPesquisa; }
            set
            {
                this._arrFormaPagamentoPesquisa = value;
                RaisePropertyChanged("arrFormaPagamentoPesquisa", false);
                if (this._arrFormaPagamentoPesquisa.Count > 0)
                    base.intSelectedIndexGrid = 0;
            }
        }

        public List<tbAuditoria> arrAuditoria { get; set; }

        #endregion Propriedades



        #region Comandos

        private bool CanAnterior(object objParam)
        {
            return (base.enStatusTelaAtual == enStatusTela.Navegacao || base.enStatusTelaAtual == enStatusTela.Padrao);
        }
        private void Anterior(object objParam)
        {
            Retorno objRetorno;
            using (var objBLL = new FormaPagamento())
            {
                objRetorno = objBLL.RetornaFormaPagamento(this.objFormaPagamento == null ? 0 : this.objFormaPagamento.fpg_codigo, enNavegacao.Anterior);
            }
            if (objRetorno.intCodigoErro == 0)
            {
                this.objFormaPagamento = (tbFormaPagamento)objRetorno.objRetorno;
                base.enStatusTelaAtual = enStatusTela.Navegacao;
            }
            else
                MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
        }

        private bool CanProximo(object objParam)
        {
            return (base.enStatusTelaAtual == enStatusTela.Navegacao || base.enStatusTelaAtual == enStatusTela.Padrao);
        }
        private void Proximo(object objParam)
        {
            Retorno objRetorno;
            using (var objBLL = new FormaPagamento())
            {
                objRetorno = objBLL.RetornaFormaPagamento(this.objFormaPagamento == null ? 0 : this.objFormaPagamento.fpg_codigo, enNavegacao.Proximo);
            }
            if (objRetorno.intCodigoErro == 0)
            {
                this.objFormaPagamento = (tbFormaPagamento)objRetorno.objRetorno;
                base.enStatusTelaAtual = enStatusTela.Navegacao;
            }
            else
                MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
        }

        private bool CanNovo(object objParam)
        {
            return (base.enStatusTelaAtual == enStatusTela.Navegacao || base.enStatusTelaAtual == enStatusTela.Padrao) && base.blnPermiteInclusaoRegistro;
        }
        private void Novo(object objParam)
        {
            tbFormaPagamento objFormaPagamentoAux = new tbFormaPagamento();
            this.objFormaPagamento = objFormaPagamentoAux;
            base.enStatusTelaAtual = enStatusTela.EmInclusaoOuAlteracao;
        }

        private bool CanEditar(object objParam)
        {
            return (base.enStatusTelaAtual == enStatusTela.Navegacao && base.blnPermiteAlteracaoRegistro);
        }
        private void Editar(object objParam)
        {
            base.enStatusTelaAtual = enStatusTela.EmInclusaoOuAlteracao;
        }

        private bool CanSalvar(object objParam)
        {
            return base.enStatusTelaAtual == enStatusTela.EmInclusaoOuAlteracao;
        }
        private void Salvar(object objParam)
        {
            var focusedElement = Keyboard.FocusedElement as FrameworkElement;
            if (focusedElement is TextBox)
            {
                var expression = focusedElement.GetBindingExpression(TextBox.TextProperty);
                if (expression != null && expression.ParentBinding.UpdateSourceTrigger == System.Windows.Data.UpdateSourceTrigger.LostFocus)
                    expression.UpdateSource();
            }

            this.Validate();
            if (!this.HasErrors)
            {
                Retorno objRetorno;
                using (var objBLL = new FormaPagamento())
                {
                    objRetorno = objBLL.SalvarFormaPagamento(this.objFormaPagamento, Util.objConfigStorage.objFuncionario.fun_codigo);
                }
                if (objRetorno.intCodigoErro == 0)
                {
                    this.objFormaPagamento = (tbFormaPagamento)objRetorno.objRetorno;
                    base.enStatusTelaAtual = enStatusTela.Navegacao;
                }
                else
                    MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
            }
        }

        private bool CanCancelar(object objParam)
        {
            return base.enStatusTelaAtual == enStatusTela.EmInclusaoOuAlteracao;
        }
        private void Cancelar(object objParam)
        {
            if (MessageBox.Show("Todas as alterações serão perdidas, deseja cancelar a edição?", "Atenção", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
            {
                if (this.objFormaPagamento.fpg_codigo > 0)
                {
                    Retorno objRetorno;
                    using (var objBLL = new FormaPagamento())
                    {
                        objRetorno = objBLL.RetornaFormaPagamento(this.objFormaPagamento.fpg_codigo, null);
                    }
                    if (objRetorno.intCodigoErro == 0)
                    {
                        this.objFormaPagamento = (tbFormaPagamento)objRetorno.objRetorno;
                        base.enStatusTelaAtual = enStatusTela.Navegacao;
                    }
                    else
                        MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
                }
                else
                {
                    this.objFormaPagamento = null;
                    this.ClearAllErrorsAsync();
                    base.enStatusTelaAtual = enStatusTela.Padrao;
                }
            }
        }

        private bool CanExcluir(object objParam)
        {
            return (base.enStatusTelaAtual == enStatusTela.Navegacao && base.blnPermiteExclusaoRegistro);
        }
        private void Excluir(object objParam)
        {
            if (this.objFormaPagamento != null)
            {
                if (MessageBox.Show("Tem Certeza que deseja excluir o registro selecionado?", "Atenção", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    Retorno objRetorno;
                    using (var objBLL = new FormaPagamento())
                    {
                        objRetorno = objBLL.ExcluirFormaPagamento(this.objFormaPagamento.fpg_codigo);
                    }
                    if (objRetorno.intCodigoErro == 0)
                    {
                        this.objFormaPagamento = null;
                        this.ClearAllErrorsAsync();
                        base.enStatusTelaAtual = enStatusTela.Padrao;
                    }
                    else
                        MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
                }
            }
        }

        private bool CanPesquisar(object objParam)
        {
            return (base.enStatusTelaAtual == enStatusTela.Navegacao || base.enStatusTelaAtual == enStatusTela.Padrao);
        }
        public void Pesquisar(object objParam)
        {
            if (objParam != null)
            {
                if (objParam.ToString() == "AbrirTela")
                {
                    this.objTelaPesquisa = new winPesquisa();
                    this.objTelaPesquisa.Title = "Pesquisa - " + base.strNomeTela;
                    this.objTelaPesquisa.DataContext = this;
                    this.objTelaPesquisa.Owner = (Window)Application.Current.MainWindow;
                    this.objTelaPesquisa.Closed += (sen, eve) =>
                    {
                        this.objTelaPesquisa = null;
                        var handler = OnPesquisa;
                        if (handler != null)
                            handler(this, null);
                    };
                    this.objTelaPesquisa.ShowDialog();
                }
                else if (objParam.ToString() == "FecharTela")
                {
                    if (this.objTelaPesquisa != null)
                        this.objTelaPesquisa.Close();
                }
                else if (objParam.GetType() == typeof(tbFormaPagamento))
                {
                    this.fpg_codigo = ((tbFormaPagamento)objParam).fpg_codigo;
                    if (this.objTelaPesquisa != null)
                        this.objTelaPesquisa.Close();
                }
                else
                {
                    Retorno objRetorno;
                    using (var objBLL = new FormaPagamento())
                    {
                        objRetorno = objBLL.RetornaListaFormaPagamento(objParam.ToString());
                    }
                    if (objRetorno.intCodigoErro == 0)
                        this.arrFormaPagamentoPesquisa = (List<tbFormaPagamento>)objRetorno.objRetorno;
                    else
                        MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
                }
            }
        }

        private bool CanLog(object objParam)
        {
            return base.enStatusTelaAtual == enStatusTela.Navegacao;
        }
        private void Log(object objParam)
        {
            if (objParam != null)
            {
                if (objParam.ToString() == "AbrirTela")
                {
                    Retorno objRetorno;
                    using (Auditoria objBLL = new Auditoria())
                    {
                        objRetorno = objBLL.RetornaListaAuditoria(this.objFormaPagamento.fpg_codigo, this.objFormaPagamento);
                    }
                    if (objRetorno.intCodigoErro == 0)
                    {
                        arrAuditoria = (List<tbAuditoria>)objRetorno.objRetorno;
                        winAuditoria objTelaAuditoria = new winAuditoria();
                        objTelaAuditoria.Title = "Auditoria - " + base.strNomeTela;
                        objTelaAuditoria.DataContext = this;
                        objTelaAuditoria.Owner = (Window)Application.Current.MainWindow;
                        objTelaAuditoria.Closed += (sen, eve) =>
                        {
                            arrAuditoria = null;
                            objTelaAuditoria = null;
                        };
                        objTelaAuditoria.ShowDialog();
                    }
                    else
                        MessageBox.Show(objRetorno.strMsgErro, "Atenção", MessageBoxButton.OK, Util.GetMessageImage(objRetorno.intCodigoErro));
                }
                else if (objParam.GetType() == typeof(winAuditoria))
                {
                    ((Window)objParam).Close();
                }
            }
        }

        private bool CanBuscar(object objParam)
        {
            return true;
        }
        private void Buscar(object objParam)
        {
            if (objParam != null)
            {
                int intCodigo;
                if (int.TryParse(objParam.ToString(), out intCodigo))
                    this.fpg_codigo = intCodigo;
                else
                    Pesquisar("AbrirTela");
            }
        }

        #endregion Comandos



        #region Eventos

        public event EventHandler OnPesquisa;

        #endregion Eventos



        #region Métodos



        #endregion Métodos
    }
}