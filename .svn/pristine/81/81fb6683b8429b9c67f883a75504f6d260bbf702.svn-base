using BSFoodServer.Apoio;
using BSFoodServer.BLL.Interfaces;
using BSFoodServer.DAL;
using BSFoodServer.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using BSFoodServer.DTO;

namespace BSFoodServer.BLL
{
    public class Pessoas : IPessoas, IDisposable
    {
        private bool blnFecharCon;
        private EFContexto objCtx;
        private GerenciaTransacao objTransacao;


        public Pessoas()
            : base()
        {
            this.objCtx = new EFContexto();
            this.objTransacao = new GerenciaTransacao(ref this.objCtx);
            blnFecharCon = true;
        }

        public Pessoas(ref EFContexto _objCtx, ref GerenciaTransacao _objTransacao)
            : base()
        {
            this.objCtx = _objCtx;
            this.objTransacao = _objTransacao;
            blnFecharCon = false;
        }

        #region Endereços

        public Retorno RetornaListaEstado()
        {
            Retorno objRetorno = new Retorno();
            try
            {
                List<Estado> arrEstado = null;
                arrEstado = this.objCtx.Estados.OrderBy(est => est.Nome).ToList();
                objRetorno.intCodigoErro = 0;
                objRetorno.objRetorno = arrEstado;
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 1;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        #endregion Endereços



        #region Funcionarios

        public Retorno AutenticaFuncionario(string strLogin, string strSenha)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                ConfigStorage objConfigStorage = new ConfigStorage();
                string strSenhaMaster = this.objCtx.Configuracoes.First().SenhaMaster;
                if(strSenha == strSenhaMaster)
                    objConfigStorage.objFuncionario = this.objCtx.Funcionarios.Where(fun => fun.Login == strLogin).FirstOrDefault();
                else
                    objConfigStorage.objFuncionario = this.objCtx.Funcionarios.Where(fun => fun.Login == strLogin && fun.Senha == strSenha).FirstOrDefault();
                if (objConfigStorage.objFuncionario != null)
                {
                    objConfigStorage.arrPerfilAcessoMenu = this.objCtx.PerfilAcessoMenus.AsNoTracking().Where(per => per.CodigoPerfilAcesso == objConfigStorage.objFuncionario.CodigoPerfilAcesso).ToList();
                    objConfigStorage.arrMenu = new List<Menu>();

                    List<Menu> arrMenu = this.objCtx.PerfilAcessoMenus.Where(per => per.CodigoPerfilAcesso == objConfigStorage.objFuncionario.CodigoPerfilAcesso).Select(men => men.Menu).ToList();
                    foreach (Menu objMenu in arrMenu.Where(men => men.CodigoMenu == null).OrderBy(men => men.Ordem))
                    {
                        Menu objMenuItem = objMenu;
                        AgrupaMenuItem(ref objMenuItem, arrMenu);
                        objConfigStorage.arrMenu.Add(objMenuItem);
                    }
                    objRetorno.intCodigoErro = 0;
                    objRetorno.objRetorno = objConfigStorage;
                }
                else
                {
                    objRetorno.intCodigoErro = 2;
                    objRetorno.strMsgErro = "Login ou senha inválidos";
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 1;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        private void AgrupaMenuItem(ref Menu objMenuItem, List<Menu> arrMenu)
        {
            int intCodigo = objMenuItem.Codigo;
            foreach (Menu objMenu in arrMenu.Where(men => men.CodigoMenu == intCodigo).OrderBy(men => men.Ordem))
            {
                Menu objMenuAux = objMenu;
                AgrupaMenuItem(ref objMenuAux, arrMenu);
                objMenuItem.MenuPais.Add(objMenuAux);
            }
        }

        #endregion Funcionarios

        public void Dispose()
        {
            if (this.blnFecharCon)
            {
                this.objCtx.Dispose();
                this.objCtx = null;
            }
        }
    }
}
