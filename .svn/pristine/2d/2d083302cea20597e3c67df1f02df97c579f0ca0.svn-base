using BSFood.View;
using BSFoodServer.DTO;
using BSFoodServer.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.ServiceModel;
using System.Windows;
using System.Windows.Browser;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace BSFood
{
    public partial class App : Application
    {
        public static BasicHttpBinding objHttpBinding { get; set; }

        public static ConfigStorage objConfigStorage { get; set; }

        public App()
        {
            this.Startup += this.Application_Startup;
            this.Exit += this.Application_Exit;
            this.UnhandledException += this.Application_UnhandledException;

            InitializeComponent();

            objHttpBinding = new BasicHttpBinding(BasicHttpSecurityMode.None);
            objHttpBinding.MaxBufferSize = 2147483647;
            objHttpBinding.MaxReceivedMessageSize = 2147483647;
            objHttpBinding.CloseTimeout = new TimeSpan(0, 10, 0);
            objHttpBinding.OpenTimeout = new TimeSpan(0, 10, 0);
            objHttpBinding.ReceiveTimeout = new TimeSpan(0, 10, 0);
            objHttpBinding.SendTimeout = new TimeSpan(0, 10, 0);
            objHttpBinding.TransferMode = TransferMode.Buffered;

            //objSvcPessoa = new PessoasClient(App.objHttpBinding, Apoio.Util.RetornaEndpointAddress(Apoio.enSvc.svcPessoas));
        }

        private void Application_Startup(object sender, StartupEventArgs e)
        {
            if (Application.Current.IsRunningOutOfBrowser)
            {
                App.Current.CheckAndDownloadUpdateCompleted += new CheckAndDownloadUpdateCompletedEventHandler(App_CheckAndDownloadUpdateCompleted);
                App.Current.CheckAndDownloadUpdateAsync();
                
            }
            else
                HtmlPage.Plugin.Focus();
            
            this.RootVisual = new ucPrincipal();
        }

        private void Application_Exit(object sender, EventArgs e)
        {

        }

        private void Application_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
        {
            // If the app is running outside of the debugger then report the exception using
            // the browser's exception mechanism. On IE this will display it a yellow alert 
            // icon in the status bar and Firefox will display a script error.
            if (!System.Diagnostics.Debugger.IsAttached)
            {
                // NOTE: This will allow the application to continue running after an exception has been thrown
                // but not handled. 
                // For production applications this error handling should be replaced with something that will 
                // report the error to the website and stop the application.
                e.Handled = true;
                if (Application.Current.IsRunningOutOfBrowser)
                    cwMensagem.Show(e.ExceptionObject.Message, "Erro", cwMensagem.enMsgBotao.Ok, cwMensagem.enMsgIcone.Error, null);
                else
                    Deployment.Current.Dispatcher.BeginInvoke(delegate { ReportErrorToDOM(e); });
            }
        }

        private void ReportErrorToDOM(ApplicationUnhandledExceptionEventArgs e)
        {
            try
            {
                string errorMsg = e.ExceptionObject.Message + e.ExceptionObject.StackTrace;
                errorMsg = errorMsg.Replace('"', '\'').Replace("\r\n", @"\n");

                System.Windows.Browser.HtmlPage.Window.Eval("throw new Error(\"Unhandled Error in Silverlight Application " + errorMsg + "\");");
            }
            catch (Exception)
            {
            }
        }

        void App_CheckAndDownloadUpdateCompleted(object sender, CheckAndDownloadUpdateCompletedEventArgs e)
        {
            if (e.Error == null && e.UpdateAvailable)
            {
                MessageBox.Show("Aplicativo atualizado com sucesso! " + Environment.NewLine + "Reinicie o aplicativo para aplicar as alterações!");
            }
            else
            {
                if (e.Error != null)
                    MessageBox.Show("Erro ao atualizar o aplicativo! " + Environment.NewLine + e.Error.Message);
            }
        }
    }
}
