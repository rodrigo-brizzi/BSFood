using BSFood.Apoio;
using BSFood.DataAccess.Config;
using BSFood.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Data.SqlClient;
using System.Data.SqlServerCe;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BSFood.DataAccess
{
    public class EFContexto : DbContext
    {
        public EFContexto()
            : base(Util.RetornaStringConexao(), true)
        {
            this.Configuration.ProxyCreationEnabled = false;
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.AutoDetectChangesEnabled = false;
            Database.SetInitializer(new EFContextoInitializer());
            //Database.SetInitializer<EFContexto>(new EFContextoInitializer());
            //Database.SetInitializer(new MigrateDatabaseToLatestVersion<EFContexto, BSFood.Migrations.Configuration>("BSFood.DataAccess.EFContexto"));
        }

        public virtual DbSet<tbBairro> tbBairro { get; set; }
        public virtual DbSet<tbCidade> tbCidade { get; set; }
        public virtual DbSet<tbCliente> tbCliente { get; set; }
        public virtual DbSet<tbClienteEndereco> tbClienteEndereco { get; set; }
        public virtual DbSet<tbClienteTelefone> tbClienteTelefone { get; set; }
        public virtual DbSet<tbConfiguracao> tbConfiguracao { get; set; }
        public virtual DbSet<tbEmpresa> tbEmpresa { get; set; }
        public virtual DbSet<tbEstado> tbEstado { get; set; }
        public virtual DbSet<tbFuncionario> tbFuncionario { get; set; }
        public virtual DbSet<tbMenu> tbMenu { get; set; }
        public virtual DbSet<tbPerfilAcesso> tbPerfilAcesso { get; set; }
        public virtual DbSet<tbPerfilAcessoMenu> tbPerfilAcessoMenu { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //remover algumas convenções do entity framework
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();
            modelBuilder.Conventions.Remove<ManyToManyCascadeDeleteConvention>();

            //configurar as propriedades strings para terem o tipo nvarchar no banco de dados
            if (Database.Connection is SqlCeConnection)
            {
                modelBuilder.Properties<string>().Configure(p => p.HasColumnType("nvarchar"));
            }
            else if (Database.Connection is SqlConnection)
            {
                modelBuilder.Properties<string>().Configure(p => p.HasColumnType("varchar"));
            }

            //configurar o tamanho das strings para tamanho 100 quando não informado na configuração da entidade
            modelBuilder.Properties<string>().Configure(p => p.HasMaxLength(100));

            //adicionar a configuração para cada entidade
            modelBuilder.Configurations.Add(new tbBairroConfig());
            modelBuilder.Configurations.Add(new tbCidadeConfig());
            modelBuilder.Configurations.Add(new tbClienteConfig());
            modelBuilder.Configurations.Add(new tbClienteEnderecoConfig());
            modelBuilder.Configurations.Add(new tbClienteTelefoneConfig());
            modelBuilder.Configurations.Add(new tbConfiguracaoConfig());
            modelBuilder.Configurations.Add(new tbEmpresaConfig());
            modelBuilder.Configurations.Add(new tbEstadoConfig());
            modelBuilder.Configurations.Add(new tbFuncionarioConfig());
            modelBuilder.Configurations.Add(new tbMenuConfig());
            modelBuilder.Configurations.Add(new tbPerfilAcessoConfig());
            modelBuilder.Configurations.Add(new tbPerfilAcessoMenuConfig());

        }
    }
}
