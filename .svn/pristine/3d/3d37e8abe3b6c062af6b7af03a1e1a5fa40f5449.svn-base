using BSFoodServer.Apoio;
using BSFoodServer.DAL.Config;
using BSFoodServer.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Data.SqlClient;
using System.Data.SqlServerCe;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BSFoodServer.DAL
{
    public class EFContexto : DbContext
    {
        public EFContexto()
            : base(Util.RetornaStringConexao(), true)
        {
            this.Configuration.ProxyCreationEnabled = false;
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.AutoDetectChangesEnabled = false;
            Database.SetInitializer(new EFContextoInitializer());
            //Database.SetInitializer<EFContexto>(new EFContextoInitializer());
            //Database.SetInitializer(new MigrateDatabaseToLatestVersion<EFContexto, BSFoodServer.Migrations.Configuration>("BSFoodServer.DAL.EFContexto"));
        }

        public DbSet<Bairro> Bairros { get; set; }
        public DbSet<Cidade> Cidades { get; set; }
        public DbSet<Cliente> Clientes { get; set; }
        public DbSet<ClienteEndereco> ClienteEnderecos { get; set; }
        public DbSet<ClienteTelefone> ClienteTelefones { get; set; }
        public DbSet<Configuracao> Configuracoes { get; set; }
        public DbSet<Empresa> Empresas { get; set; }
        public DbSet<Estado> Estados { get; set; }
        public DbSet<Funcionario> Funcionarios { get; set; }
        public DbSet<Menu> Menus { get; set; }
        public DbSet<PerfilAcesso> PerfilAcessos { get; set; }
        public DbSet<PerfilAcessoMenu> PerfilAcessoMenus { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //remover algumas convenções do entity framework
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();
            modelBuilder.Conventions.Remove<ManyToManyCascadeDeleteConvention>();

            //configurar as propriedades strings para terem o tipo nvarchar no banco de dados
            if (Database.Connection is SqlCeConnection)
            {
                modelBuilder.Properties<string>().Configure(p => p.HasColumnType("nvarchar"));
            }
            else if (Database.Connection is SqlConnection)
            {
                modelBuilder.Properties<string>().Configure(p => p.HasColumnType("varchar"));
            }

            //configurar o tamanho das strings para tamanho 100 quando não informado na configuração da entidade
            modelBuilder.Properties<string>().Configure(p => p.HasMaxLength(100));

            //adicionar a configuração para cada entidade
            modelBuilder.Configurations.Add(new BairroConfig());
            modelBuilder.Configurations.Add(new CidadeConfig());
            modelBuilder.Configurations.Add(new ClienteConfig());
            modelBuilder.Configurations.Add(new ClienteEnderecoConfig());
            modelBuilder.Configurations.Add(new ClienteTelefoneConfig());
            modelBuilder.Configurations.Add(new ConfiguracaoConfig());
            modelBuilder.Configurations.Add(new EmpresaConfig());
            modelBuilder.Configurations.Add(new EstadoConfig());
            modelBuilder.Configurations.Add(new FuncionarioConfig());
            modelBuilder.Configurations.Add(new MenuConfig());
            modelBuilder.Configurations.Add(new PerfilAcessoConfig());
            modelBuilder.Configurations.Add(new PerfilAcessoMenuConfig());

        }
    }
}
