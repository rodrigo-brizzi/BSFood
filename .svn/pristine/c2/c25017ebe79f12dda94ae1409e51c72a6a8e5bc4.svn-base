using BSFood.DataAccess;
using BSFood.DataTransfer;
using BSFood.Apoio;
using BSFood.BusinessLogic.Interfaces;
using BSFood.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using System.ServiceModel;
using System.Collections.ObjectModel;


namespace BSFood.BusinessLogic
{
    public class Financeiro : IFinanceiro, IDisposable
    {
        private bool blnFecharCon;
        private EFContexto objCtx;
        private GerenciaTransacao objTransacao;


        public Financeiro()
            : base()
        {
            this.objCtx = new EFContexto();
            this.objTransacao = new GerenciaTransacao(ref this.objCtx);
            blnFecharCon = true;
        }

        public Financeiro(ref EFContexto _objCtx, ref GerenciaTransacao _objTransacao)
            : base()
        {
            this.objCtx = _objCtx;
            this.objTransacao = _objTransacao;
            blnFecharCon = false;
        }



        #region Forma Pagamento

        public Retorno RetornaFormaPagamento(int intCodigo, enNavegacao? enDirecao)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                tbFormaPagamento objFormaPagamento = null;
                if (enDirecao == null)
                    objFormaPagamento = this.objCtx.tbFormaPagamento.AsNoTracking()
                                                    .Where(fpg => fpg.fpg_codigo == intCodigo)
                                                    .FirstOrDefault();
                if (enDirecao == enNavegacao.Proximo)
                    objFormaPagamento = this.objCtx.tbFormaPagamento.AsNoTracking()
                                                    .Where(fpg => fpg.fpg_codigo > intCodigo)
                                                    .OrderBy(fpg => fpg.fpg_codigo).FirstOrDefault();
                if (enDirecao == enNavegacao.Anterior)
                    objFormaPagamento = this.objCtx.tbFormaPagamento.AsNoTracking()
                                                    .Where(fpg => fpg.fpg_codigo < intCodigo)
                                                    .OrderByDescending(fpg => fpg.fpg_codigo).FirstOrDefault();
                if (objFormaPagamento != null)
                {
                    objRetorno.intCodigoErro = 0;
                    objRetorno.objRetorno = objFormaPagamento;
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = "Registro não encontrado";
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno RetornaListaFormaPagamento(string strParametro)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                List<tbFormaPagamento> arrFormaPagamento = this.objCtx.tbFormaPagamento.AsNoTracking()
                                                      .Where(fpg => (fpg.fpg_codigo.ToString().Contains(strParametro) || fpg.fpg_descricao.Contains(strParametro)))
                                                      .OrderBy(fpg => fpg.fpg_descricao)
                                                      .ToList();
                objRetorno.intCodigoErro = 0;
                objRetorno.objRetorno = arrFormaPagamento;
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno SalvarFormaPagamento(tbFormaPagamento objFormaPagamento)
        {
            Retorno objRetorno = new Retorno();
            string strValidacao = this.ValidaFormaPagamento(objFormaPagamento);
            try
            {
                enOperacao enTipoOperacao;
                if (strValidacao == string.Empty)
                {
                    if (objFormaPagamento.fpg_codigo == 0)
                    {
                        enTipoOperacao = enOperacao.Inclusao;
                        this.objCtx.tbFormaPagamento.Add(objFormaPagamento);
                    }
                    else
                    {
                        enTipoOperacao = enOperacao.Alteracao;
                        tbFormaPagamento objFormaPagamentoContexto = this.objCtx.tbFormaPagamento.Where(fpg => fpg.fpg_codigo == objFormaPagamento.fpg_codigo).FirstOrDefault();
                        this.objCtx.Entry(objFormaPagamentoContexto).CurrentValues.SetValues(objFormaPagamento);
                    }
                    this.objCtx.SaveChanges();
                    using (Auditoria objBLL = new Auditoria(ref this.objCtx, ref this.objTransacao))
                        objBLL.SalvarAuditoria(objFormaPagamento.fpg_codigo, enTipoOperacao, objFormaPagamento);
                    objRetorno = RetornaFormaPagamento(objFormaPagamento.fpg_codigo, null);
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = strValidacao;
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno ExcluirFormaPagamento(int intCodigo)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                //Cria um contexto isolado para a trasacao de exclusao
                using (EFContexto objContexto = new EFContexto())
                {
                    //Inicia uma transacao no contexto isolado
                    using (var transacao = objContexto.Database.BeginTransaction())
                    {
                        try
                        {
                            tbFormaPagamento objFormaPagamento = objContexto.tbFormaPagamento.Where(fpg => fpg.fpg_codigo == intCodigo).FirstOrDefault();
                            if (objFormaPagamento != null)
                            {
                                //Tenta excluir o perfil no contexto isolado
                                objContexto.tbFormaPagamento.Remove(objFormaPagamento);
                                objContexto.SaveChanges();
                                transacao.Commit();

                                objRetorno.intCodigoErro = 0;
                                objRetorno.objRetorno = true;
                            }
                            else
                            {
                                objRetorno.intCodigoErro = 48;
                                objRetorno.strMsgErro = "FormaPagamento não encontrado para exclusão";
                            }
                        }
                        catch (Exception)
                        {
                            //Se deu erro é porque o perfil tem  registros relacionado
                            transacao.Rollback();
                            objRetorno.intCodigoErro = 48;
                            objRetorno.strMsgErro = "FormaPagamento não pode ser excluido pois há registros relacionados ao mesmo.";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        private string ValidaFormaPagamento(tbFormaPagamento objFormaPagamento)
        {
            if (string.IsNullOrEmpty(objFormaPagamento.fpg_descricao) || string.IsNullOrWhiteSpace(objFormaPagamento.fpg_descricao))
                return "O nome deve ser informado.";

            if (this.objCtx.tbFormaPagamento.AsNoTracking()
                                         .Where(fpg => (fpg.fpg_descricao.Equals(objFormaPagamento.fpg_descricao)) && fpg.fpg_codigo != objFormaPagamento.fpg_codigo)
                                         .Count() > 0)
                return "Já existe FormaPagamento com esse nome.";

            return string.Empty;
        }

        #endregion FormaPagamentos



        #region Caixa

        public Retorno RetornaCaixa(int intCodigo)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                tbCaixa objCaixa = null;
                if (intCodigo > 0)
                {
                    objCaixa = this.objCtx.tbCaixa.Include(cai => cai.tbCaixaMovimento)
                                                      .Include(cai => cai.tbCaixaMovimento.Select(fpg => fpg.tbFormaPagamento)).AsNoTracking()
                                                      .Where(cai => cai.cai_codigo == intCodigo)
                                                      .FirstOrDefault();

                }
                else
                {
                    objCaixa = this.objCtx.tbCaixa.Include(cai => cai.tbCaixaMovimento)
                                                      .Include(cai => cai.tbCaixaMovimento.Select(fpg => fpg.tbFormaPagamento)).AsNoTracking()
                                                      .Where(cai => cai.cai_dataFechamento == null)
                                                      .OrderByDescending(cai => cai.cai_codigo)
                                                      .FirstOrDefault();
                }
                if (objCaixa != null)
                {
                    objRetorno.intCodigoErro = 0;
                    objRetorno.objRetorno = objCaixa;
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = "Registro não encontrado";
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno AbrirCaixa(tbCaixa objCaixa)
        {
            Retorno objRetorno = new Retorno();
            string strValidacao = this.ValidaAberturaCaixa(objCaixa);
            try
            {
                enOperacao enTipoOperacao;
                if (strValidacao == string.Empty)
                {
                    foreach (tbCaixaMovimento objCaixaMovimento in objCaixa.tbCaixaMovimento)
                    {
                        if (objCaixaMovimento.caim_data == null)
                            objCaixaMovimento.caim_data = DateTime.Now;
                        objCaixaMovimento.caio_codigo = 1;//ABERTURA DE CAIXA
                        objCaixaMovimento.tbCaixa = null;
                        objCaixaMovimento.tbCaixaOperacao = null;
                        objCaixaMovimento.tbFormaPagamento = null;
                    }
                    if (objCaixa.cai_codigo == 0)
                    {
                        objCaixa.cai_dataAbertura = DateTime.Now;
                        objCaixa.fun_codigo = Util.objConfigStorage.objFuncionario.fun_codigo;
                        enTipoOperacao = enOperacao.Inclusao;
                        this.objCtx.tbCaixa.Add(objCaixa);
                    }
                    else
                    {
                        enTipoOperacao = enOperacao.Alteracao;
                        tbCaixa objCaixaContexto = this.objCtx.tbCaixa.Include(caim => caim.tbCaixaMovimento)
                                                               .Where(cai => cai.cai_codigo == objCaixa.cai_codigo).FirstOrDefault();
                        //Remover movimento de caixa que não vieram na coleçao
                        int[] arrCaimCodigo = objCaixa.tbCaixaMovimento.Select(caim => caim.caim_codigo).ToArray();
                        this.objCtx.tbCaixaMovimento.RemoveRange(objCaixaContexto.tbCaixaMovimento.Where(caim => !arrCaimCodigo.Contains(caim.caim_codigo)));

                        //Alterar os movimentos de caixa que vieram na coleção
                        foreach (tbCaixaMovimento objCaixaMovimentoContexto in objCaixaContexto.tbCaixaMovimento.Where(caim => arrCaimCodigo.Contains(caim.caim_codigo)))
                            this.objCtx.Entry(objCaixaMovimentoContexto).CurrentValues.SetValues(objCaixa.tbCaixaMovimento.Where(caim => caim.caim_codigo == objCaixaMovimentoContexto.caim_codigo).FirstOrDefault());

                        //Inclui os subgrupos que vieram na coleção sem codigo
                        foreach (tbCaixaMovimento objItem in objCaixa.tbCaixaMovimento.Where(caim => caim.caim_codigo == 0))
                        {
                            objItem.caim_codigo = objCaixa.cai_codigo;
                            this.objCtx.tbCaixaMovimento.Add(objItem);
                        }

                        //Atualiza o grupo de produtos
                        this.objCtx.Entry(objCaixaContexto).CurrentValues.SetValues(objCaixa);
                    }
                    this.objCtx.SaveChanges();
                    using (Auditoria objBLL = new Auditoria(ref this.objCtx, ref this.objTransacao))
                        objBLL.SalvarAuditoria(objCaixa.cai_codigo, enTipoOperacao, objCaixa);
                    objRetorno = RetornaCaixa(objCaixa.cai_codigo);
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = strValidacao;
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno RetornaCaixaFechamento(int intCodigo)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                tbCaixa objCaixa = null;
                if (intCodigo > 0)
                {
                    objCaixa = this.objCtx.tbCaixa.Include(cai => cai.tbCaixaMovimento)
                                                      .Include(cai => cai.tbFuncionario)
                                                      .Include(cai => cai.tbCaixaMovimento.Select(fpg => fpg.tbFormaPagamento)).AsNoTracking()
                                                      .Where(cai => cai.cai_codigo == intCodigo)
                                                      .FirstOrDefault();
                }
                else
                {
                    objCaixa = this.objCtx.tbCaixa.Include(cai => cai.tbCaixaMovimento)
                                                      .Include(cai => cai.tbFuncionario)
                                                      .Include(cai => cai.tbCaixaMovimento.Select(fpg => fpg.tbFormaPagamento)).AsNoTracking()
                                                      .OrderByDescending(cai => cai.cai_codigo)
                                                      .FirstOrDefault();
                }
                if (objCaixa != null)
                {
                    FechamentoCaixa objFechamentoCaixa = new FechamentoCaixa();
                    objFechamentoCaixa.objCaixa = objCaixa;

                    //Formas de pagamento dos pedidos de entrega
                    objFechamentoCaixa.arrFechamentoCaixaFormaEntrega = (from ped in this.objCtx.tbPedido
                                                                          .AsNoTracking()
                                                                          .Where(ped => ped.ped_status != "X" && 
                                                                              ped.ped_origem == "E" &&
                                                                              ped.cai_codigo == objCaixa.cai_codigo)
                                                                         group ped by new
                                                                         {
                                                                             codigo = ped.fpg_codigo,
                                                                             descricao = ped.tbFormaPagamento.fpg_descricao
                                                                         } 
                                                                         into grupo
                                                                         select new FechamentoCaixaForma
                                                                         {
                                                                             fpg_codigo = grupo.Key.codigo,
                                                                             fpg_descricao = grupo.Key.descricao,
                                                                             decValorTotalForma = grupo.Sum(ped => ped.ped_valorTotal)
                                                                         }).ToList();

                    //Formas de pagamento dos pedidos de comanda
                    objFechamentoCaixa.arrFechamentoCaixaFormaComanda = (from ped in this.objCtx.tbPedido
                                                                          .AsNoTracking()
                                                                          .Where(ped => ped.ped_status == "F" &&
                                                                              ped.ped_origem == "C" &&
                                                                              ped.cai_codigo == objCaixa.cai_codigo)
                                                                         group ped by new
                                                                         {
                                                                             codigo = ped.fpg_codigo,
                                                                             descricao = ped.tbFormaPagamento.fpg_descricao
                                                                         }
                                                                             into grupo
                                                                             select new FechamentoCaixaForma
                                                                             {
                                                                                 fpg_codigo = grupo.Key.codigo,
                                                                                 fpg_descricao = grupo.Key.descricao,
                                                                                 decValorTotalForma = grupo.Sum(ped => ped.ped_valorTotal)
                                                                             }).ToList();

                    if (objCaixa.cai_dataFechamento == null)
                        objFechamentoCaixa.strStatusCaixa = "Aberto";
                    else
                        objFechamentoCaixa.strStatusCaixa = "Fechado";

                    objRetorno = RelatorioCaixaFechamento(objCaixa);
                    if (objRetorno.intCodigoErro == 0)
                    {
                        objFechamentoCaixa.strRelatorio = objRetorno.objRetorno as string;
                        objRetorno.objRetorno = objFechamentoCaixa;
                    }
#region base
        //    GlobalRetorno objRetorno = new GlobalRetorno();
        //    try
        //    {
        //        //se for informado código zero e direcao nula, retorna o ultimo caixa movimento
        //        if (intCodigoCaixa == 0 && enDirecao == null)
        //        {
        //            if (blnPermiteVerFechamentoTodosCaixas == true)
        //                intCodigoCaixa = this.objCtx.tbCaixa.Max(cai => cai.cai_codigo);
        //            else
        //                intCodigoCaixa = this.objCtx.tbCaixa.Where(cai => cai.pes_codigo == intCodigoUsuario).Max(cai => cai.cai_codigo);
        //        }

        //        var query = this.objCtx.tbCaixa.AsNoTracking().Include(cai => cai.tbPessoa)
        //                                                      .Include(cai => cai.tbTerminal);

        //        if (enDirecao == null)
        //        {
        //            query = query.Where(cai => cai.cai_codigo == intCodigoCaixa);
        //        }
        //        else if (enDirecao == enNavegacao.Anterior)
        //        {
        //            query = query.Where(cai => cai.cai_codigo < intCodigoCaixa).OrderByDescending(cai => cai.cai_codigo);
        //        }
        //        else if (enDirecao == enNavegacao.Proximo)
        //        {
        //            query = query.Where(cai => cai.cai_codigo > intCodigoCaixa).OrderBy(cai => cai.cai_codigo);
        //        }

        //        tbCaixa objCaixa = query.FirstOrDefault();

        //        if (objCaixa != null)
        //        {
        //            //preciso checar se o caixa pertente ao usuario informado
        //            if (blnPermiteVerFechamentoTodosCaixas != true)
        //            {
        //                if (objCaixa.pes_codigo != intCodigoUsuario)
        //                    throw new GlobalException("Esse caixa pertente a outro usuário. É necessário permissão especial para visualizar o caixa de outro usuário");
        //            }

        //            intCodigoCaixa = objCaixa.cai_codigo;

        //            FechamentoCaixa objFechamento = new FechamentoCaixa();

        //            objFechamento.CodigoCaixa = objCaixa.cai_codigo;
        //            objFechamento.DataAbertura = objCaixa.cai_dataAbertura;
        //            objFechamento.DataFechamento = objCaixa.cai_dataFechamento;
        //            objFechamento.CodigoFuncionario = objCaixa.tbPessoa.pes_codigo;
        //            objFechamento.NomeFuncionario = objCaixa.tbPessoa.pes_nome;
        //            objFechamento.CodigoTerminal = objCaixa.ter_codigo;
        //            objFechamento.Terminal = objCaixa.tbTerminal.ter_nome;


        //            objFechamento.ObservacaoFechamento = objCaixa.cai_observacaoFechamento;

        //            //recuperar as vendas finalizadas(F) feitas no caixa incluindo os detalhes das formas de pagamento utilizadas
        //            objFechamento.Vendas = this.objCtx.tbVendaCupom.AsNoTracking()
        //                                                           .Include(vec => vec.tbVendaCupomDetalhe)
        //                                                           .Include(vec => vec.tbVendaCupomDetalhe.Select(vecd => vecd.tbProduto))
        //                                                           .Include(vec => vec.tbPessoaFuncionario)
        //                                                           .Include(vec => vec.tbCaixaMovimento.Select(caim => caim.tbFormaPagamento.tbTipoFormaPagamento))
        //                                                           .Where(vec => vec.cai_codigo == intCodigoCaixa && vec.vec_statusCupom == "F")
        //                                                           .ToList();

        //            // deixo apenas os movimentos da venda apenas do tipo de venda, pois a venda pode ter movimentos de caixa de troco e haver
        //            foreach (tbVendaCupom objVendaCupom in objFechamento.Vendas)
        //            {
        //                objVendaCupom.tbCaixaMovimento = objVendaCupom.tbCaixaMovimento.Where(caim => caim.caio_codigo == (int)enCaixaOperacao.VendaCupom && caim.caim_cancelado == false).ToList();
        //            }


        //            //recuperar as vendas canceladas(C) no caixa
        //            objFechamento.VendasCanceladas = this.objCtx.tbVendaCupom.AsNoTracking()
        //                                                                     .Include(vec => vec.tbPessoaFuncionario)
        //                                                                     .Where(vec => vec.cai_codigo == intCodigoCaixa && vec.vec_statusCupom == "C")
        //                                                                     .ToList();

        //            // deixo apenas os movimentos da venda apenas do tipo de venda, pois a venda pode ter movimentos de caixa de troco e haver
        //            foreach (tbVendaCupom objVendaCupom in objFechamento.VendasCanceladas)
        //            {
        //                objVendaCupom.tbCaixaMovimento = objVendaCupom.tbCaixaMovimento.Where(caim => caim.caio_codigo == (int)enCaixaOperacao.VendaCupom).ToList();
        //            }


        //            //recuperar as sangrias incluindo os movimentos de caixas gerados pela sangria; inclui a forma de pagamento a nivel de exibição
        //            objFechamento.Sangrias = this.objCtx.tbSangria.AsNoTracking()
        //                                                          .Include(san => san.tbCaixaMovimento
        //                                                          .Select(fpg => fpg.tbFormaPagamento))
        //                                                          .Where(san => san.cai_codigo == intCodigoCaixa &&
        //                                                                    (san.san_excluido == null || san.san_excluido == false)).ToList();

        //            //recuperar os suprimentos, incluindo os movimentos de caixas gerados pelo suprimento; inclui a forma de pagamento a nivel de exibição
        //            objFechamento.Suprimentos = this.objCtx.tbSuprimento.AsNoTracking()
        //                                                                .Include(sup => sup.tbCaixaMovimento
        //                                                                .Select(fpg => fpg.tbFormaPagamento))
        //                                                                .Where(sup => sup.cai_codigo == intCodigoCaixa && sup.edi_codigo == null && sup.crd_codigo == null && sup.sup_excluido == false)
        //                                                                .ToList();

        //            ////recuperar os movimentos de caixa do tipo venda, agrupados pelo tipo da forma, somando o total de cada forma
        //            int intCodigoOperacaoVenda = (int)enCaixaOperacao.VendaCupom;
        //            objFechamento.FormasRecebidas = (from caim in this.objCtx.tbCaixaMovimento
        //                                                                      .AsNoTracking()
        //                                                                      .Where(caim => caim.cai_codigo == intCodigoCaixa &&
        //                                                                                     caim.caim_cancelado == false &&
        //                                                                                     (caim.caio_codigo == intCodigoOperacaoVenda ||
        //                                                                                      caim.caio_codigo == (int)enCaixaOperacao.Troco
        //                                                                                     )
        //                                                                        )
        //                                             group caim by new
        //                                             {
        //                                                 codigo = caim.fpg_codigo,
        //                                                 descricao = caim.tbFormaPagamento.fpg_descricao
        //                                             } into grupo
        //                                             select new FormaFechamentoCaixa
        //                                             {
        //                                                 fpg_codigo = grupo.Key.codigo,
        //                                                 fpg_descricao = grupo.Key.descricao,
        //                                                 decValorTotalForma = grupo.Where(g => g.caio_codigo == (int)intCodigoOperacaoVenda).Sum(caim => caim.caim_valor)
        //                                                                      -
        //                                                                      (grupo.Where(g => g.caio_codigo == (int)enCaixaOperacao.Troco).Sum(caim => caim.caim_valor)
        //                                                                      == null ? 0 : grupo.Where(g => g.caio_codigo == (int)enCaixaOperacao.Troco).Sum(caim => caim.caim_valor))
        //                                             }).ToList();


        //            //recuperar os haveres criados
        //            int intCodigoOperacaoHaver = (int)enCaixaOperacao.GeracaoHaver;
        //            objFechamento.HaverCriados = this.objCtx.tbCaixaMovimento
        //                                                     .AsNoTracking()
        //                                                     .Include(caim => caim.tbContaPagarHaverCriado)
        //                                                     .Where(caim => caim.cai_codigo == intCodigoCaixa && caim.caio_codigo == intCodigoOperacaoHaver && caim.caim_cancelado == false)
        //                                                     .Select(caim => caim.tbContaPagarHaverCriado)
        //                                                     .ToList();

        //            //recuperar cheque troco
        //            int intCodigoOperacaoTroco = (int)enCaixaOperacao.Troco;
        //            int intCodigoOperacaoChequeTroco = (int)enCaixaOperacao.ChequeTroco;
        //            objFechamento.ChequeTroco = this.objCtx.tbCheque
        //                                                   .AsNoTracking()
        //                                                   .Include(chq => chq.tbChequeMovimentoLote)
        //                                                   .Include(chq => chq.tbCaixaMovimento)
        //                                                   .Where(chq => chq.tbCaixaMovimento.Where(caim => caim.cai_codigo == intCodigoCaixa && caim.caio_codigo == intCodigoOperacaoChequeTroco && caim.caim_cancelado == false).Count() > 0)
        //                                                   .ToList();

        //            //recuperar aferições
        //            objFechamento.Afericoes = (from abap in this.objCtx.tbAbastecimentoPdv
        //                                                            .Include(abap => abap.tbProduto)
        //                                                            .AsNoTracking()
        //                                                            .Where(abap => abap.abps_codigo == 4 && abap.cai_codigo == intCodigoCaixa)
        //                                       group abap by new
        //                                       {
        //                                           codigo = abap.bco_codigo,
        //                                           bico = abap.abap_bico,
        //                                           produto = abap.tbProduto.pro_nome
        //                                       } into grupo

        //                                       select new Afericao
        //                                       {
        //                                           bco_codigo = grupo.Key.codigo,
        //                                           bco_numeroBico = grupo.Key.bico,
        //                                           pro_nome = grupo.Key.produto,
        //                                           abap_litragem = grupo.Sum(abap => abap.abap_litragem)
        //                                       }

        //                                      ).ToList();

        //            //recuperar vales emitidos pelo caixa
        //            objFechamento.Vales = (from crec in this.objCtx.tbContaReceber
        //                                   join pes in this.objCtx.tbPessoa on crec.pes_codigo equals pes.pes_codigo
        //                                   join caim in this.objCtx.tbCaixaMovimento on crec.caim_codigo equals caim.caim_codigo
        //                                   join cai in this.objCtx.tbCaixa on caim.cai_codigo equals cai.cai_codigo

        //                                   where crec.olct_codigo == 16 && cai.cai_codigo == intCodigoCaixa && crec.emp_codigo == Util.objConfigStorage.emp_codigo

        //                                   select new Vale
        //                                   {
        //                                       crec_codigo = crec.crec_codigo,
        //                                       crec_documento = crec.crec_documento,
        //                                       pes_nome = pes.pes_nome,
        //                                       crec_dataLancamento = crec.crec_dataLancamento,
        //                                       crec_valor = crec.crec_valor,
        //                                       crec_descricao = crec.crec_descricao
        //                                   }
        //                                      ).ToList();

        //            //recuperar contas a receber vindo do suprimento    
        //            objFechamento.arrContasReceberPagas = (from sup in this.objCtx.tbSuprimento
        //                                                   join crd in this.objCtx.tbContaReceberDetalhe on sup.crd_codigo equals crd.crd_codigo
        //                                                   join crec in this.objCtx.tbContaReceber on crd.crec_codigo equals crec.crec_codigo
        //                                                   join pes in this.objCtx.tbPessoa on crec.pes_codigo equals pes.pes_codigo
        //                                                   where
        //                                                       sup.cai_codigo == intCodigoCaixa
        //                                                       &&
        //                                                       sup.emp_codigo == Util.objConfigStorage.emp_codigo
        //                                                       &&
        //                                                       sup.sup_excluido == false
        //                                                   select new ContaReceberPaga
        //                                                    {
        //                                                        crec_codigo = crec.crec_codigo,
        //                                                        crec_documento = crec.crec_documento,
        //                                                        crec_dataLancamento = crec.crec_dataLancamento,
        //                                                        crec_valor = crec.crec_valor,
        //                                                        crec_valorPago = crd.crd_valorPago + crd.crd_valorPagoJuros + crd.crd_valorPagoMulta + crd.crd_valorPagoTaxa,
        //                                                        pes_nome = pes.pes_nome
        //                                                    }
        //                                                ).Distinct().ToList();

        //            //recuperar os suprimentos que são as entradas diversas, incluindo os movimentos de caixas gerados pelo suprimento; inclui a forma de pagamento a nivel de exibição
        //            objFechamento.EntradasDiversas = (from sup in this.objCtx.tbSuprimento
        //                                              join edi in this.objCtx.tbEntradaDiversa on sup.edi_codigo equals edi.edi_codigo
        //                                              join pes in this.objCtx.tbPessoa on sup.pes_codigoCliente equals pes.pes_codigo
        //                                              where sup.cai_codigo == intCodigoCaixa && sup.sup_excluido == false
        //                                              select new EntradaDiversa
        //                                              {
        //                                                  sup_codigo = sup.sup_codigo,
        //                                                  pes_nome = pes.pes_nome,
        //                                                  edi_descricao = edi.edi_descricao,
        //                                                  sup_valor = sup.sup_valor
        //                                              }).ToList();

        //            objFechamento.EntradasDiversasEstornos = (from sup in this.objCtx.tbSuprimento
        //                                                      join edi in this.objCtx.tbEntradaDiversa on sup.edi_codigo equals edi.edi_codigo
        //                                                      join pes in this.objCtx.tbPessoa on sup.pes_codigoCliente equals pes.pes_codigo
        //                                                      where sup.cai_codigo == intCodigoCaixa && sup.sup_excluido == true
        //                                                      select new EntradaDiversaEstorno
        //                                                      {
        //                                                          san_codigo = sup.sup_codigo,
        //                                                          pes_nome = pes.pes_nome,
        //                                                          edi_descricao = edi.edi_descricao,
        //                                                          san_valor = sup.sup_valor
        //                                                      }).ToList();




        //            ////########################  CARTA FRETE ###########################\\\
        //            //***********************                        **********************\\
        //            List<int?> arrCartasVinculadas = this.objCtx.tbCaixaMovimento.Include(caim => caim.tbContaReceber)
        //                   .AsNoTracking().Where(caim => caim.carf_codigo != null && caim.caim_cancelado == false).Select(caim => caim.carf_codigo).ToList();

        //            objFechamento.CartasFretes = this.objCtx.tbCartaFrete.AsNoTracking()
        //                                                                 .Include(carf => carf.tbCaixaMovimento)
        //                                                                 .Include(carf => carf.tbContaReceber)
        //                                                                 .Include(carf => carf.tbPessoa)
        //                                                                 .Where(carf =>
        //                                                                    (carf.tbCaixaMovimento.Any(caim => caim.cai_codigo == intCodigoCaixa && caim.caim_cancelado == false && caim.vec_codigo != null && caim.caio_codigo == 2))
        //                                                                    && carf.carf_excluida == false
        //                                                                    && carf.tbContaReceber.crec_dataPagamento == null
        //                                                                     ).Select(carf => new CartaFrete
        //                                                                     {
        //                                                                         carf_codigo = carf.carf_codigo,
        //                                                                         carf_numero = carf.carf_numero,
        //                                                                         carf_valor = carf.tbCaixaMovimento.Where(caim => caim.carf_codigo == carf.carf_codigo).Select(caim => caim.caim_valor).FirstOrDefault() ?? carf.carf_valor,
        //                                                                         carf_descricao = carf.carf_observacoes,
        //                                                                         pes_codigo = carf.pes_codigo,
        //                                                                         pes_nome = carf.tbPessoa.pes_nome,
        //                                                                         caim_codigo = carf.tbCaixaMovimento.Where(caim => caim.carf_codigo == carf.carf_codigo).Select(caim => caim.caim_codigo).FirstOrDefault()
        //                                                                     })
        //                                                                    .ToList();

        //            //********************   SELECIONA CAIXAS MOVIMENTOS SEM VINCULOS  ***********************\\
        //            List<CartaFrete> arrMovimentoCartaFreteSemVinculo = this.objCtx.tbCaixaMovimento.AsNoTracking()
        //                                         .Include(caim => caim.tbFormaPagamento)
        //                                         .Where(caim => caim.cai_codigo == intCodigoCaixa &&
        //                                                         caim.caim_cancelado == false &&
        //                                                         caim.vec_codigo != null &&
        //                                                         caim.caio_codigo == 2 &&
        //                                                         caim.carf_codigo == null &&
        //                                                         caim.tbFormaPagamento.tfp_codigo == (int)enTipoFormaPagamento.CartaFrete)
        //                                                         .Select(caim => new CartaFrete
        //                                                         {
        //                                                             carf_codigo = null,
        //                                                             carf_numero = null,
        //                                                             carf_valor = caim.caim_valor,
        //                                                             carf_descricao = "Codigo Movimento: " + caim.caim_codigo.ToString(),
        //                                                             pes_codigo = null,
        //                                                             pes_nome = null,
        //                                                             caim_codigo = caim.caim_codigo
        //                                                         }).OrderBy(cf => cf.carf_codigo).ToList();

        //            //*********************** ADICIONA NO ARRAY ***********************\\
        //            foreach (CartaFrete objCartaFreteAdd in arrMovimentoCartaFreteSemVinculo)
        //                objFechamento.CartasFretes.Add(objCartaFreteAdd);

        //            //************************** ORDENAÇÃO ***********************\\
        //            if (objFechamento.CartasFretes != null)
        //                objFechamento.CartasFretes = objFechamento.CartasFretes.OrderBy(cf => cf.carf_codigo).ToList();
        //            //********************************************************************\\
        //            ////##################### FIM  CARTA FRETE ###########################\\\


        //            //recuperar os caixas movimentos do tipo venda em que a forma seja do tipo cheque a vista ou cheque prazo
        //            var arrCaixaMovimentoCheque = this.objCtx.tbCaixaMovimento.AsNoTracking()
        //                                                                      .Include(caim => caim.tbCheque)
        //                                                                      .Where(caim => caim.cai_codigo == intCodigoCaixa &&
        //                                                                                      caim.caim_cancelado == false &&
        //                                                                                     (caim.caio_codigo == (int)enCaixaOperacao.VendaCupom || caim.caio_codigo == (int)enCaixaOperacao.GeracaoHaver || caim.caio_codigo == (int)enCaixaOperacao.EntradasDiversas) &&
        //                                                                                     (caim.tbFormaPagamento.tfp_codigo == (int)enTipoFormaPagamento.ChequePrazo ||
        //                                                                                      caim.tbFormaPagamento.tfp_codigo == (int)enTipoFormaPagamento.ChequeVista
        //                                                                                     )
        //                                                                              ).ToList();

        //            objFechamento.ChequeRecebido = new List<ChequeRecebido>();
        //            //percorrer os movimentos de cheque para adicionar na coleção os cheques existentes, ou criar o cheque com o valor do movimento, para que o cheque seja preenchido pelo usuário
        //            foreach (var objCaixaMovimentoCheque in arrCaixaMovimentoCheque)
        //            {
        //                ChequeRecebido objChequeRecebido = new ChequeRecebido();
        //                objChequeRecebido.caim_codigo = objCaixaMovimentoCheque.caim_codigo;
        //                if (objCaixaMovimentoCheque.tbCheque != null)
        //                    objChequeRecebido.objCheque = objCaixaMovimentoCheque.tbCheque;
        //                else
        //                {
        //                    objChequeRecebido.blnPrecisaCadastrarCheque = true;
        //                    objChequeRecebido.objCheque = new tbCheque { chq_valor = objCaixaMovimentoCheque.caim_valor };
        //                }

        //                objFechamento.ChequeRecebido.Add(objChequeRecebido);
        //            }



        //            //movimentos de fechamento
        //            int intCodigoOperacaoFechamento = (int)enCaixaOperacao.FechamentoDeCaixa;
        //            objFechamento.MovimentoFechamento = this.objCtx.tbCaixaMovimento
        //                                                            .Include(caim => caim.tbFormaPagamento)
        //                                                            .AsNoTracking()
        //                                                            .Where(caim => caim.cai_codigo == intCodigoCaixa && caim.caio_codigo == intCodigoOperacaoFechamento && caim.caim_cancelado == false)
        //                                                            .ToList();



        //            // encerrantes
        //            DateTime dtAgora = DateTime.Now;
        //            if (objCaixa.cai_dataFechamento != null)
        //                dtAgora = objCaixa.cai_dataFechamento.Value;

        //            objFechamento.Encerrantes = this.objCtx.spEncerrantesFechamentoCaixa(objCaixa.cai_dataAbertura, dtAgora, intCodigoCaixa, Util.objConfigStorage.objEmpresa.emp_codigo).ToList();


        //            // itens vendidos(agrupados por produto e preço)
        //            objFechamento.ItensVendidos = this.RetornarItensVendidoCaixa(intCodigoCaixa);

        //            // RESUMO
        //            objFechamento.Resumo = new List<FechamentoCaixaResumo>();

        //            decimal? decValorAbertura = this.objCtx.tbCaixa.AsNoTracking()
        //                                                           .Where(cai => cai.cai_codigo == intCodigoCaixa)
        //                                                           .Select(cai => cai.cai_valor).FirstOrDefault();
        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(+) Abertura de Caixa",
        //                decValor = decValorAbertura
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(+) Suprimento",
        //                decValor = objFechamento.Suprimentos.Sum(s => s.sup_valor) - decValorAbertura
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(+) Entradas Diversas",
        //                decValor = objFechamento.EntradasDiversas.Sum(s => s.sup_valor)
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(-) Sangria",
        //                decValor = objFechamento.Sangrias.Sum(s => s.san_valor)
        //            });


        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(+) Recebimento de Vendas",
        //                decValor = objFechamento.FormasRecebidas.Sum(f => f.decValorTotalForma)
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(+) Recebimento de Conta Receber",
        //                decValor = objFechamento.arrContasReceberPagas.Sum(f => f.crec_valorPago)
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(-) Troco(Dinheiro)",
        //                decValor = this.objCtx.tbCaixaMovimento.AsNoTracking()
        //                                                       .Where(caim => caim.cai_codigo == intCodigoCaixa &&
        //                                                                      caim.caio_codigo == intCodigoOperacaoTroco &&
        //                                                                      caim.caim_cancelado == false
        //                                                             )
        //                                                        .Sum(caim => caim.caim_valor)
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(-) Vales",
        //                decValor = objFechamento.Vales.Sum(v => v.crec_valor)
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "\n"
        //            }); // pular linha

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(=) Troco(Cheque)",
        //                decValor = this.objCtx.tbCaixaMovimento.AsNoTracking()
        //                                                       .Where(caim => caim.cai_codigo == intCodigoCaixa &&
        //                                                                      caim.caio_codigo == intCodigoOperacaoChequeTroco &&
        //                                                                      caim.caim_cancelado == false
        //                                                             )
        //                                                        .Sum(caim => caim.caim_valor)
        //            });

        //            objFechamento.Resumo.Add(new FechamentoCaixaResumo
        //            {
        //                strDescricao = "(=) Haver Criado",
        //                decValor = objFechamento.HaverCriados.Sum(h => h.cpg_valor)
        //            });


        //            //formas resumo
        //            objFechamento.FormasResumo = this.RetornaFormasResumoAgrupadas(intCodigoCaixa);

        //            // recuperar as formas do tipo nota assinada para atualizar o valor dessas, pois o valor delas não será informado pelo usuário
        //            List<tbCaixaMovimento> objMovCaixaNota = objFechamento.MovimentoFechamento.Where(f => f.tbFormaPagamento != null && f.tbFormaPagamento.tfp_codigo == (int)enTipoFormaPagamento.NotaAssinada).ToList();
        //            foreach (var objMovimentoFechamentoNotaAssinada in objMovCaixaNota)
        //            {
        //                objMovimentoFechamentoNotaAssinada.caim_valor = objFechamento.FormasResumo.Where(f => f.fpg_codigo == objMovimentoFechamentoNotaAssinada.fpg_codigo)
        //                                                                                          .FirstOrDefault()
        //                                                                                          .decValorTotalForma;
        //            }

        //            //se o caixa não tem movimentos de fechamento, irá criar os movimento de fechamento, com valor zero(exceto para TEF e nota assinada que irá sugerir o valor)
        //            if (objFechamento.MovimentoFechamento.Count == 0)
        //            {
        //                foreach (var objFormaResumo in objFechamento.FormasResumo)
        //                {
        //                    tbCaixaMovimento objMovimentoFechamento = new tbCaixaMovimento();
        //                    objMovimentoFechamento.tbFormaPagamento = this.objCtx.tbFormaPagamento
        //                                                                         .AsNoTracking()
        //                                                                         .Where(fpg => fpg.fpg_codigo == objFormaResumo.fpg_codigo)
        //                                                                         .FirstOrDefault();

        //                    int intTipoForma = objMovimentoFechamento.tbFormaPagamento.tfp_codigo;
        //                    objMovimentoFechamento.fpg_codigo = objFormaResumo.fpg_codigo;

        //                    // irá sugerir o valor da forma TEF
        //                    if (objMovimentoFechamento.tbFormaPagamento.fpg_tef == true || objMovimentoFechamento.tbFormaPagamento.tfp_codigo == (int)enTipoFormaPagamento.NotaAssinada || objMovimentoFechamento.tbFormaPagamento.tfp_codigo == (int)enTipoFormaPagamento.CartaFrete)
        //                        objMovimentoFechamento.caim_valor = objFormaResumo.decValorTotalForma;
        //                    else
        //                        objMovimentoFechamento.caim_valor = 0;

        //                    objFechamento.MovimentoFechamento.Add(objMovimentoFechamento);
        //                }
        //            }

        //            objFechamento.decValorFinal = objFechamento.FormasResumo.Sum(f => f.decValorTotalForma);

        //            objRetorno.objRetorno = objFechamento;
        //        }
        //        else
        //        {
        //            objRetorno.blnTemErro = true;
        //            objRetorno.strMsgErro = "Registro não encontrado";
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Util.LogErro(ex);
        //        objRetorno.blnTemErro = true;
        //        objRetorno.strMsgErro = ex.Message;
        //        objRetorno.strExceptionToString = ex.ToString();
        //    }
        //    return objRetorno;
        //}

        //public List<ItemVendido> RetornarItensVendidoCaixa(int intCodigoCaixa)
        //{
        //    return this.objCtx.tbVendaCupomDetalhe.Include(vecd => vecd.tbVendaCupom)
        //                                          .Include(vecd => vecd.tbProduto)
        //                                          .Where(vecd => vecd.tbVendaCupom.cai_codigo == intCodigoCaixa && // filtrar o código do caixa
        //                                                         vecd.vecd_cancelado == false && // filtrar itens não cancelados
        //                                                         vecd.tbVendaCupom.vec_statusCupom == "F" // filtrar itens de cupons finalizados
        //                                           ).GroupBy(g =>
        //                                               new
        //                                                {
        //                                                    pro_codigo = g.pro_codigo,
        //                                                    pro_nome = g.tbProduto.pro_nome,
        //                                                    decValorUnitario = g.vecd_valorUnitario
        //                                                }
        //                                            ).Select(s => new ItemVendido
        //                                                  {
        //                                                      pro_codigo = s.Key.pro_codigo,
        //                                                      pro_nome = s.Key.pro_nome,
        //                                                      decValorUnitario = s.Key.decValorUnitario,
        //                                                      decQuantidade = s.Sum(g => g.vecd_quantidade),
        //                                                      decValorTotal = s.Key.decValorUnitario * s.Sum(g => g.vecd_quantidade)
        //                                                  }
        //                                              ).ToList();

        //}

        ///// <summary>
        ///// Agrupa por forma de pagamento todos os movimentos de caixa que são diferentes de FechamentoCaixa e Cheque troco, então soma a entrada e saida de cada forma agrupada dando o total
        ///// </summary>
        ///// <param name="intCodigoCaixa"></param>
        ///// <returns></returns>
        //private List<FormaFechamentoCaixa> RetornaFormasResumoAgrupadas(int intCodigoCaixa)
        //{
        //    List<FormaFechamentoCaixa> arrResumo = new List<FormaFechamentoCaixa>();

        //    int intCodigoOperacaoFechamento = (int)enCaixaOperacao.FechamentoDeCaixa;

        //    //agrupar os movimentos de caixa que não são de operação de fechamento, agrupando por forma e tipo de operação(entrada/saida)

        //    var formasResumo = (from caim in this.objCtx.tbCaixaMovimento.Include(caim => caim.tbCaixaOperacao)
        //                                                                 .Include(caim => caim.tbFormaPagamento)
        //                                                                 .Include(caim => caim.tbCheque)
        //                                                                 .Where(caim => caim.cai_codigo == intCodigoCaixa &&
        //                                                                                caim.caio_codigo != intCodigoOperacaoFechamento &&
        //                                                                     //caim.caio_codigo != (int)enCaixaOperacao.ChequeTroco &&
        //                                                                                caim.caim_cancelado == false
        //                                                                        )
        //                        group caim by new
        //                        {
        //                            codigoForma = caim.fpg_codigo,
        //                            descricaoForma = caim.tbFormaPagamento.fpg_descricao,
        //                            tipoOperacao = caim.tbCaixaOperacao.caio_tipoOperacao
        //                        } into grupo

        //                        //retora o codigo da forma, o tipo da operacao, e valor total da forma para a operação
        //                        select new
        //                        {
        //                            fpg_codigo = grupo.Key.codigoForma,
        //                            fpg_descricao = grupo.Key.descricaoForma,
        //                            decValorTotalForma = grupo.Sum(s => s.caim_valor),
        //                            tipoOperacao = grupo.Key.tipoOperacao
        //                        }).ToList();



        //    //percorre os movimentos que estao agrupados por formas e tipo de operacao
        //    //se na lista de resumo nao tem a forma, se nao recupera a forma ja adicionada. soma ou subtrai o valor de acordo com o tipo da operação
        //    foreach (var item in formasResumo)
        //    {
        //        FormaFechamentoCaixa objFormaResumo = null;
        //        if (arrResumo.Where(f => f.fpg_codigo == item.fpg_codigo).Count() == 0)
        //        {
        //            objFormaResumo = new FormaFechamentoCaixa();
        //            objFormaResumo.fpg_codigo = item.fpg_codigo;
        //            objFormaResumo.fpg_descricao = item.fpg_descricao;
        //            objFormaResumo.decValorTotalForma = 0;
        //            arrResumo.Add(objFormaResumo);
        //        }
        //        else
        //        {
        //            objFormaResumo = arrResumo.Where(fpg => fpg.fpg_codigo == item.fpg_codigo).FirstOrDefault();
        //        }

        //        if (item.tipoOperacao == "E")
        //            objFormaResumo.decValorTotalForma += item.decValorTotalForma;
        //        else
        //            objFormaResumo.decValorTotalForma -= item.decValorTotalForma;
        //    }

        //    return arrResumo;
        //}                   
#endregion base
                    //objRetorno.intCodigoErro = 0;
                    //objRetorno.objRetorno = objFechamentoCaixa;
                }
                else
                {
                    objRetorno.intCodigoErro = 48;
                    objRetorno.strMsgErro = "Registro não encontrado";
                }
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        public Retorno FecharCaixa(FechamentoCaixa objFechamentoCaixa)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                tbCaixa objCaixaContexto = this.objCtx.tbCaixa.Where(cai => cai.cai_codigo == objFechamentoCaixa.objCaixa.cai_codigo).FirstOrDefault();

                objFechamentoCaixa.objCaixa.tbCaixaMovimento = null;
                objFechamentoCaixa.objCaixa.tbFuncionario = null;
                objFechamentoCaixa.objCaixa.tbPedido = null;
                objFechamentoCaixa.objCaixa.tbVenda = null;
                objFechamentoCaixa.objCaixa.cai_dataFechamento = DateTime.Now;

                //Atualiza o grupo de produtos
                this.objCtx.Entry(objCaixaContexto).CurrentValues.SetValues(objFechamentoCaixa.objCaixa);
                this.objCtx.SaveChanges();
                using (Auditoria objBLL = new Auditoria(ref this.objCtx, ref this.objTransacao))
                    objBLL.SalvarAuditoria(objFechamentoCaixa.objCaixa.cai_codigo, enOperacao.Alteracao, objFechamentoCaixa.objCaixa);
                objRetorno = RetornaCaixaFechamento(objFechamentoCaixa.objCaixa.cai_codigo);
            }
            catch (Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        private string ValidaAberturaCaixa(tbCaixa objCaixa)
        {
            //if (string.IsNullOrEmpty(objProdutoGrupo.pgr_nome) || string.IsNullOrWhiteSpace(objProdutoGrupo.pgr_nome))
            //    return "O nome deve ser informado.";

            //if (this.objCtx.tbProdutoGrupo.AsNoTracking()
            //                             .Where(pgr => (pgr.pgr_nome.Equals(objProdutoGrupo.pgr_nome)) && pgr.pgr_codigo != objProdutoGrupo.pgr_codigo)
            //                             .Count() > 0)
            //    return "Já existe produto grupo com esse nome.";

            if (objCaixa.tbCaixaMovimento.Count == 0)
                return "Não foram informados nenhuma forma de pagamento.";

            return string.Empty;
        }

        private Retorno RelatorioCaixaFechamento(tbCaixa objCaixa)
        {
            Retorno objRetorno = new Retorno();
            try
            {
                if (objCaixa.cai_dataFechamento != null)
                {
                    var arrPedidoVista = this.objCtx.tbPedido.AsNoTracking().Where(ped => ped.cai_codigo == objCaixa.cai_codigo &&
                                                                                   ped.tbFormaPagamento.fpg_cobranca == "V").ToList();
                    decimal decTotalVista = 0;
                    if (arrPedidoVista.Count > 0)
                        decTotalVista = arrPedidoVista.Sum(ped => ped.ped_valorTotal);

                    
                    var arrPedidoPrazo = this.objCtx.tbPedido.AsNoTracking().Where(ped => ped.cai_codigo == objCaixa.cai_codigo &&
                                                                                   ped.tbFormaPagamento.fpg_cobranca == "P").ToList();
                    decimal decTotalPrazo = 0;
                    if (arrPedidoPrazo.Count > 0)
                        decTotalPrazo = arrPedidoPrazo.Sum(ped => ped.ped_valorTotal);

                    decimal decTotalSaida = 0; //Providenciar

                    var arrPedidoEntrega = (from ped in this.objCtx.tbPedido
                                                .AsNoTracking()
                                                .Where(ped => ped.cai_codigo == objCaixa.cai_codigo &&
                                                ped.ped_origem == "E" &&
                                                (ped.ped_status == "F" || ped.ped_status == "E"))
                                            group ped by new
                                            {
                                                codigo = ped.fun_funcionarioEntregador,
                                                nome = ped.tbFuncionarioEntregador.fun_nome
                                            }
                                                into grupo
                                                select new
                                                {
                                                    codigo = grupo.Key.codigo,
                                                    nome = grupo.Key.nome,
                                                    decValorTotal = grupo.Sum(ped => ped.ped_valorTotal)
                                                }).ToList();
                    decimal decTotalEntrega = 0;
                    if(arrPedidoEntrega.Count > 0)
                        decTotalEntrega = arrPedidoEntrega.Sum(ped => ped.decValorTotal);

                    
                    var arrPedidoComanda = this.objCtx.tbPedido
                                                 .AsNoTracking()
                                                 .Where(ped => ped.cai_codigo == objCaixa.cai_codigo &&
                                                 ped.ped_origem == "C" && ped.ped_status == "F").ToList();
                    decimal decTotalComanda = 0;
                    if (arrPedidoComanda.Count > 0)
                        decTotalComanda = arrPedidoComanda.Sum(ped => ped.ped_valorTotal);

                    var arrPedidoExcluido = this.objCtx.tbPedido
                                              .AsNoTracking()
                                              .Where(ped => ped.cai_codigo == objCaixa.cai_codigo &&
                                              ped.ped_status == "X").ToList();
                    decimal decTotalExcluido = 0;
                    if (arrPedidoExcluido.Count > 0)
                        decTotalExcluido = arrPedidoExcluido.Sum(ped => ped.ped_valorTotal);

                    decimal decTotalRecebimento = 0;

                    var arrPedidoForma = (from ped in this.objCtx.tbPedido
                                                .AsNoTracking()
                                                .Where(ped => ped.cai_codigo == objCaixa.cai_codigo)
                                            group ped by new
                                            {
                                                codigo = ped.fpg_codigo,
                                                descricao = ped.tbFormaPagamento.fpg_descricao,
                                                cobranca = ped.tbFormaPagamento.fpg_cobranca
                                            }
                                                into grupo
                                                select new
                                                {
                                                    codigo = grupo.Key.codigo,
                                                    descricao = grupo.Key.descricao,
                                                    cobranca = grupo.Key.cobranca,
                                                    decValorTotalForma = grupo.Sum(ped => ped.ped_valorTotal)
                                                }).ToList();
                    decimal decTotalForma = 0;
                    if (arrPedidoForma.Count > 0)
                        decTotalForma = arrPedidoForma.Sum(ped => ped.decValorTotalForma);

                    StringBuilder sbRelatorio = new StringBuilder();
                    sbRelatorio.Append("          FECHAMENTO DE CAIXA          " + Environment.NewLine);
                    sbRelatorio.Append(" " + Environment.NewLine);
                    sbRelatorio.Append("Data da abertura..: " + objCaixa.cai_dataAbertura.Value.ToString("dd/MM/yyyy HH:mm") + Environment.NewLine);
                    sbRelatorio.Append("Data do fechamento: " + objCaixa.cai_dataFechamento.Value.ToString("dd/MM/yyyy HH:mm") + Environment.NewLine);
                    sbRelatorio.Append("Data da impressao.: " + DateTime.Now.ToString("dd/MM/yyyy HH:mm") + Environment.NewLine);
                    sbRelatorio.Append(" " + Environment.NewLine);
                    sbRelatorio.Append("             RESUMO PEDIDOS            " + Environment.NewLine);
                    sbRelatorio.Append(" " + Environment.NewLine);
                    sbRelatorio.Append("TOTAL A VISTA..............: " + decTotalVista.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("TOTAL A PRAZO..............: " + decTotalPrazo.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("TOTAL SAIDAS...............: " + decTotalSaida.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("TOTAL......................: " + ((decTotalVista + decTotalPrazo) - decTotalSaida).ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("                A VISTA                " + Environment.NewLine);
                    sbRelatorio.Append("ENTREGAS...................: " + decTotalEntrega.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    foreach (var objEntregador in arrPedidoEntrega)
                    {
                        sbRelatorio.Append("  " +
                            (objEntregador.codigo.ToString() + " " + objEntregador.nome).PadRight(15).Substring(0,15) + " " +
                            (objEntregador.decValorTotal * 14 / 100).ToString("#,##0.00").PadLeft(10) + " " +
                            objEntregador.decValorTotal.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    }
                    sbRelatorio.Append("COMANDAS...................: " + decTotalComanda.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("RECEBIMENTOS...............: " + decTotalRecebimento.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("                A PRAZO                " + Environment.NewLine);
                    foreach (var objPedidoPrazo in arrPedidoPrazo)
                    {
                        sbRelatorio.Append(objPedidoPrazo.ped_nomeCliente.PadRight(28).Substring(0, 28) + " " +
                            objPedidoPrazo.ped_valorTotal.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    }
                    sbRelatorio.Append("TOTAL......................: " + decTotalPrazo.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("                SAIDAS                 " + Environment.NewLine);
                    //sbRelatorio.Append("POUPA DE FRUTAS............: " + Environment.NewLine);
                    sbRelatorio.Append("TOTAL......................: " + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("               EXCLUIDO                " + Environment.NewLine);
                    foreach (var objPedidoExcluido in arrPedidoExcluido)
                    {
                        sbRelatorio.Append(objPedidoExcluido.ped_nomeCliente.PadRight(28).Substring(0, 28) + " " +
                            objPedidoExcluido.ped_valorTotal.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    }
                    sbRelatorio.Append("TOTAL......................: " + decTotalExcluido.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("RESUMO DE PEDIDOS POR GRUPO DE PRODUTO " + Environment.NewLine);
                    //sbRelatorio.Append("C/ CLB.....................: " + Environment.NewLine);
                    //sbRelatorio.Append("TOTAL......................: " + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("         REGISTRO DE ALTERACAO         " + Environment.NewLine);
                    //sbRelatorio.Append("M FULANO DE VA            VD           " + Environment.NewLine);
                    //sbRelatorio.Append("E MARIA DA  VA            VD           " + Environment.NewLine);
                    sbRelatorio.Append("---------------------------------------" + Environment.NewLine);
                    sbRelatorio.Append("          FORMAS DE PAGAMENTO          " + Environment.NewLine);
                    foreach (var objPedidoForma in arrPedidoForma)
                    {
                        sbRelatorio.Append((objPedidoForma.descricao + "(" + objPedidoForma.cobranca + ")").PadRight(28).Substring(0, 28) + " " +
                            objPedidoForma.decValorTotalForma.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);
                    }
                    sbRelatorio.Append("TOTAL......................: " + decTotalForma.ToString("#,##0.00").PadLeft(10) + Environment.NewLine);

                    objRetorno.intCodigoErro = 0;
                    objRetorno.objRetorno = sbRelatorio.ToString();
                }
                else
                {
                    objRetorno.intCodigoErro = 0;
                    objRetorno.objRetorno = string.Empty;
                }
            }
            catch(Exception ex)
            {
                Util.LogErro(ex);
                objRetorno.intCodigoErro = 16;
                objRetorno.strMsgErro = ex.Message;
                objRetorno.strExceptionToString = ex.ToString();
            }
            return objRetorno;
        }

        #endregion Caixa



        public void Dispose()
        {
            if (this.blnFecharCon)
            {
                this.objCtx.Dispose();
                this.objCtx = null;
            }
        }
    }
}
